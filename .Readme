# Github Repo
https://github.com/SumeetWajpe/Qualcomm_Neo4j_Oct_25

# Querries

# First way of creating relationship
create (s:Supplier{name:"ITC"}),(c:Client{name:"Honeywell"}), (s)-[r:SUPPLIES_TO]->(c) return s,c,r

# Second way of creating relationships
create (s:Supplier{name:"ITC"})-[r:SUPPLIES_TO]->(c:Client{name:"IBM"}) return s,c,r

# Multiple nodes with their relationships
create (h:Property{name:"House"})<-[r:OWNS]-(p:Person{name:"Aniket"})-[m:MARRIED_TO]->(g:Person{name:"Geeta"}) return *


create (a:Person{name:"Aniket"}),(h:Property{name:"HOME"}),(g:Person{name:"Geeta"}),(a)-[i:IS_MARRIED_TO]->(g),(a)-[o:OWNS]->(h) return *

# Using Where caluse 
Match (player:PLAYER) WHERE player.weight >= 100 RETURN player

# Hands On - Querries
# Querrying the nodes
1. Return // All nodes // - Match (n) return n
2. Return All Nodes with specific label (PLAYER) - Match (n:PLAYER) return n
3. Return players with their name and height - Match (n:PLAYER) return n.name,n.height
4. Return Nodes (Players) with height greater than 2.1 or weight greater than 120 - Match (n:PLAYER) WHERE n.height >= 2.1 OR n.weight >= 120 return n
5. Return  Nodes(Players) with a BMI not larger than 25
MATCH (player:PLAYER) 
WHERE NOT (player.weight / (player.height * player.height)) > 25
RETURN player
6. Return (3) players with highest height - Using Order By
MATCH (player:PLAYER)
WHERE player.height >= 2
RETURN player
ORDER BY player.height DESC
LIMIT 3 

# Querrying nodes with the relationships
1. Get all the LAKER PLAYERS
Match (player:PLAYER) - [:PLAYS_FOR] -> (team:TEAM)
WHERE team.name = "LA Lakers"
RETURN player,team

2. Get All Players that make more than 35M
Match (player:PLAYER) - [contract:PLAYS_FOR] -> (team:TEAM)
WHERE contract.salary >= 35000000
return player

3. GET all LeBron Teammates who are earning > than 35000000
Match (player:PLAYER{name:"LeBron James"})-[t:TEAMMATES] -> (teammate:PLAYER)
Match (teammate)-[contract:PLAYS_FOR]->(:TEAM)
WHERE contract.salary >= 35000000
RETURN teammate

# Aggregation querries
1. Find out total player count
Match (n:PLAYER) RETURN COUNT(*) AS totalPlayerNodes

2. Get players and number of games played
MATCH (player:PLAYER) - [gameplayed:PLAYED_AGAINST] - (team:TEAM)
RETURN player.name, COUNT(gameplayed)

3. Get players and  (Avg points)
MATCH (p:PLAYER)-[gamePlayed:PLAYED_AGAINST]->(:TEAM)
RETURN p.name, AVG(gamePlayed.points)

4. Using With clause
MATCH (c:Customer)-[:BUYS]->(p:Product {name: 'Chocolate'})
WITH c AS customers
RETURN customers.firstName AS chocolateCustomers

5. Person who has not directed any movie
MATCH (a:Person {name: 'Martin Sheen'})
OPTIONAL MATCH (a)-[r:DIRECTED]->()
RETURN a.name, r


# Update querries
1. Update the node preoperties
MATCH (p:PLAYER{name:"James Harden"}) SET p.weight = 120 RETURN p.name,p.weight

2. Updating relationship properties
Update LeBron James salary to 60000000
MATCH (player:PLAYER{name:"LeBron James"})-[contract:PLAYS_FOR]->(t:TEAM)
SET contract.salary = 60000000
RETURN player.name,contract.salary

# Remove is used to remove properties from Node / Rel
# Delete is used to remove node / rel

// Delete node and relationships

MATCH (ja{name:"Ja Morant"})
DETACH DELETE ja

// Delete relationship
MATCH(joel {name: "Joel Embiid"}) - [rel:PLAYS_FOR] -> (:TEAM)
DELETE rel

